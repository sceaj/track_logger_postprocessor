'''
Created on May 20, 2019

@author: jeff
'''
from data_state import DataState
from enum import Enum

class CanFrameParser(object):
    '''
    classdocs
    '''
    Fields = Enum(['Mnemonic', 'Time', 'CanId', 'Byte0', 'Byte1', 'Byte2', 'Byte3', 'Byte4', 'Byte5', 'Byte6', 'Byte7'])
    
    @staticmethod
    def can_id(field_data):
        return field_data[CanFrameParser.Fields.CanId]
    
    @staticmethod
    def frame_byte(field_data, byte_idx):
        if byte_idx == 0:
            return field_data[CanFrameParser.Fields.Byte0]
        elif byte_idx == 1:
            return field_data[CanFrameParser.Fields.Byte1]
        elif byte_idx == 2:
            return field_data[CanFrameParser.Fields.Byte2]
        elif byte_idx == 3:
            return field_data[CanFrameParser.Fields.Byte3]
        elif byte_idx == 4:
            return field_data[CanFrameParser.Fields.Byte4]
        elif byte_idx == 5:
            return field_data[CanFrameParser.Fields.Byte5]
        elif byte_idx == 6:
            return field_data[CanFrameParser.Fields.Byte6]
        elif byte_idx == 7:
            return field_data[CanFrameParser.Fields.Byte7]
        else:
            raise ValueError("The byte index of a CAN frame must be between 0 and 7")

    @staticmethod
    def frame_word(field_data, word_idx):
        if word_idx == 0:
            return field_data[CanFrameParser.Fields.Byte0] + (256 * field_data[CanFrameParser.Fields.Byte1])
        elif word_idx == 2:
            return field_data[CanFrameParser.Fields.Byte2] + (256 * field_data[CanFrameParser.Fields.Byte3])
        elif word_idx == 4:
            return field_data[CanFrameParser.Fields.Byte4] + (256 * field_data[CanFrameParser.Fields.Byte5])
        elif word_idx == 6:
            return field_data[CanFrameParser.Fields.Byte6] + (256 * field_data[CanFrameParser.Fields.Byte7])
        else:
            raise ValueError("The word index of a CAN frame must be 0, 2, 4, or 6")

    def __init__(self, state):
        '''
        Constructor
        '''
        self.state = state
        
    def parse(self, sentence):
        field_data = sentence.split(',')
        
class CanFrame0C2Extractor(object):
    
    def extractData(self, fields, state):
        steering_angle = (fields[CanFrameParser.Fields.Byte0] + (256 * fields[CanFrameParser.Fields.Byte1])) * 0.04381
        state.put(DataState.names[DataState.names.Steering_Angle], steering_angle)
        steering_rate = (fields[CanFrameParser.Fields.Byte2] + (256 * fields[CanFrameParser.Fields.Byte3])) * 0.04381
        state.put(DataState.names[DataState.names.Steering_Rate], steering_rate)
        print "Steering_Angle: {0}".format(steering_angle)
        print "Steering_Rate: {0}".format(steering_rate)
                
class CanFrame242Extractor(object):
    
    def extractData(self, field_data, state):
        clutch_pedal = CanFrameParser.frame_byte(field_data, 0) & 0x08
        state.put(DataState.names[DataState.names.Clutch], clutch_pedal)
        engine_rpm = CanFrameParser.frame_word(field_data, 2) / 4
        state.put(DataState.names[DataState.names.RPM], engine_rpm)
        ecu_throttle = CanFrameParser.frame_byte(field_data, 5) * 100 / 255
        state.put(DataState.names[DataState.names.ECU_Throttle], ecu_throttle)
        print "Clutch: {0}".format(clutch_pedal)
        print "RPM: {0}".format(engine_rpm)
        print "ECU_THROTTLE: {0}".format(ecu_throttle)

class CanFrame245Extractor(object):
    
    def extractData(self, field_data, state):
        coolant_temp = (CanFrameParser.frame_byte(field_data, 1) * 4 / 3) - 48
        state.put(DataState.names[DataState.names.Coolant], coolant_temp)
        brake_pedal = CanFrameParser.frame_word(field_data, 2) / 4
        state.put(DataState.names[DataState.names.Brake], brake_pedal)
        print "Coolant: {0}".format(coolant_temp)
        print "Brake: {0}".format(brake_pedal)
    
class CanFrame246Extractor(object):
    
    def extractData(self, field_data, state):
        gear_selection = CanFrameParser.frame_byte(field_data, 0) & 0x07
        state.put(DataState.names[DataState.names.Gear], gear_selection)
        throttle_pedal = CanFrameParser.frame_byte(field_data, 3) * 100 / 255
        state.put(DataState.names[DataState.names.Throttle], throttle_pedal)
        print "Gear: {0}".format(gear_selection)
        print "Throttle: {0}".format(throttle_pedal)

class CanFrame24AExtractor(object):
    
    def extractData(self, field_data, state):
        lf_wheel_speed = CanFrameParser.frame_byte(field_data, 0) & 0x07
        state.put(DataState.names[DataState.names.Gear], gear_selection)
        throttle_pedal = CanFrameParser.frame_byte(field_data, 3) * 100 / 255
        state.put(DataState.names[DataState.names.Throttle], throttle_pedal)
        print "Gear: {0}".format(gear_selection)
        print "Throttle: {0}".format(throttle_pedal)
